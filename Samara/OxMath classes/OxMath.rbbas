#tag ModuleModule OxMath	#tag Method, Flags = &h0		Function BitTestAnd(Extends i As Integer, test As Integer) As Boolean		  		  #if NOT DebugBuild		    #pragma BackgroundTasks False		    #pragma BoundsChecking False		    #pragma NilObjectChecking False		    #pragma StackOverflowChecking False		  #endif		  		  ' Allows for more compact C-like tests.		  ' e.g. if i.BitTestAnd(value) then DoSomething		  		  if Bitwise.BitAnd(i, test) > 0 then		    return True		  else		    return False		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function BitTestOr(Extends i As Integer, test As Integer) As Boolean		  		  #if NOT DebugBuild		    #pragma BackgroundTasks False		    #pragma BoundsChecking False		    #pragma NilObjectChecking False		    #pragma StackOverflowChecking False		  #endif		  		  ' Allows for more compact C-like tests.		  ' e.g. if i.BitTestOr(value) then DoSomething		  		  if Bitwise.BitOr(i, test) > 0 then		    return True		  else		    return False		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub Deinitialize()		  		  rand = Nil		  kVector3Right = Nil		  kVector3Up = Nil		  kVector3Forward = Nil		  kVector3Origin = Nil		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub Initialize()		  		  rand = New Random		  		  ' Vector "constants" (don't modify these for your own good!)		  OxMath.kVector3Right = New OxMVector3(1.0, 0.0, 0.0)		  OxMath.kVector3Up = New OxMVector3(0.0, 1.0, 0.0)		  OxMath.kVector3Forward = New OxMVector3(0.0, 0.0, 1.0)		  OxMath.kVector3Origin = New OxMVector3(0.0, 0.0, 0.0)		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function RandomFloat() As Double		  		  #if NOT DebugBuild		    #pragma BackgroundTasks False		    #pragma BoundsChecking False		    #pragma NilObjectChecking False		    #pragma StackOverflowChecking False		  #endif		  		  ' Return a float between 0.0 & 1.0		  return rand.Number		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function RandomInteger(min As Integer, max As Integer) As Integer		  		  #if NOT DebugBuild		    #pragma BackgroundTasks False		    #pragma BoundsChecking False		    #pragma NilObjectChecking False		    #pragma StackOverflowChecking False		  #endif		  		  ' Return an int between min & max		  return rand.InRange(min, max)		End Function	#tag EndMethod	#tag Property, Flags = &h1		Protected kVector3Forward As OxMVector3	#tag EndProperty	#tag Property, Flags = &h1		Protected kVector3Origin As OxMVector3	#tag EndProperty	#tag Property, Flags = &h1		Protected kVector3Right As OxMVector3	#tag EndProperty	#tag Property, Flags = &h1		Protected kVector3Up As OxMVector3	#tag EndProperty	#tag Property, Flags = &h21		#tag Note			Only use after init. There's no Nil object checking in the accessors!		#tag EndNote		Private rand As Random	#tag EndProperty	#tag ComputedProperty, Flags = &h1		#tag Getter			Get			  			  #if NOT DebugBuild			    #pragma BackgroundTasks False			    #pragma BoundsChecking False			    #pragma NilObjectChecking False			    #pragma StackOverflowChecking False			  #endif			  			  return rand.Seed			End Get		#tag EndGetter		#tag Setter			Set			  			  #if NOT DebugBuild			    #pragma BackgroundTasks False			    #pragma BoundsChecking False			    #pragma NilObjectChecking False			    #pragma StackOverflowChecking False			  #endif			  			  rand.Seed = value			End Set		#tag EndSetter		Protected RandomSeed As Integer	#tag EndComputedProperty	#tag Constant, Name = kDegToRad, Type = Double, Dynamic = False, Default = \"0.01745329251994", Scope = Protected	#tag EndConstant	#tag Constant, Name = kEpsilon, Type = Double, Dynamic = False, Default = \"0.000001", Scope = Protected	#tag EndConstant	#tag Constant, Name = kOneMinusEpsilon, Type = Double, Dynamic = False, Default = \"0.999999", Scope = Protected	#tag EndConstant	#tag Constant, Name = kOnePlusEpsilon, Type = Double, Dynamic = False, Default = \"1.000001", Scope = Protected	#tag EndConstant	#tag Constant, Name = kPi, Type = Double, Dynamic = False, Default = \"3.14159265358979", Scope = Protected	#tag EndConstant	#tag Constant, Name = kPiByTwo, Type = Double, Dynamic = False, Default = \"6.28318530717958", Scope = Protected	#tag EndConstant	#tag Constant, Name = kPiOverTwo, Type = Double, Dynamic = False, Default = \"1.5707963267949", Scope = Protected	#tag EndConstant	#tag Constant, Name = kRadToDeg, Type = Double, Dynamic = False, Default = \"57.2957795130824", Scope = Protected	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="2147483648"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule