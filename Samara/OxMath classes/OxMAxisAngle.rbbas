#tag ClassClass OxMAxisAngle	#tag Method, Flags = &h0		Sub Constructor()		  		  #if NOT DebugBuild		    #pragma BackgroundTasks False		    #pragma BoundsChecking False		    #pragma NilObjectChecking False		    #pragma StackOverflowChecking False		  #endif		  		  ' Default		  Y = 1.0		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(vx As Double, vy As Double, vz As Double, ang As Double)		  		  #if NOT DebugBuild		    #pragma BackgroundTasks False		    #pragma BoundsChecking False		    #pragma NilObjectChecking False		    #pragma StackOverflowChecking False		  #endif		  		  SetRotate(vx, vy, vz, ang)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(axisang As OxMAxisAngle)		  		  #if NOT DebugBuild		    #pragma BackgroundTasks False		    #pragma BoundsChecking False		    #pragma NilObjectChecking False		    #pragma StackOverflowChecking False		  #endif		  		  Copy(axisang)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(quat As OxMQuaternion)		  		  #if NOT DebugBuild		    #pragma BackgroundTasks False		    #pragma BoundsChecking False		    #pragma NilObjectChecking False		    #pragma StackOverflowChecking False		  #endif		  		  SetRotate(quat)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(v As OxMVector3, ang As Double)		  		  #if NOT DebugBuild		    #pragma BackgroundTasks False		    #pragma BoundsChecking False		    #pragma NilObjectChecking False		    #pragma StackOverflowChecking False		  #endif		  		  SetRotate(v, ang)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Copy(axisang As OxMAxisAngle)		  		  #if NOT DebugBuild		    #pragma BackgroundTasks False		    #pragma BoundsChecking False		    #pragma NilObjectChecking False		    #pragma StackOverflowChecking False		  #endif		  		  X = axisang.X		  Y = axisang.Y		  Z = axisang.Z		  Angle = axisang.Angle		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Normalize()		  		  #if NOT DebugBuild		    #pragma BackgroundTasks False		    #pragma BoundsChecking False		    #pragma NilObjectChecking False		    #pragma StackOverflowChecking False		  #endif		  		  ' Sets the vector component to a length of 1.0 (unit vector)		  		  Dim mag As Double		  		  mag = (X*X) + (Y*Y) + (Z*Z)		  if mag = 0.0 then return		  mag = Sqrt(mag)		  		  X = X/mag		  Y = Y/mag		  Z = Z/mag		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetRotate(vx As Double, vy As Double, vz As Double, ang As Double)		  		  #if NOT DebugBuild		    #pragma BackgroundTasks False		    #pragma BoundsChecking False		    #pragma NilObjectChecking False		    #pragma StackOverflowChecking False		  #endif		  		  X = vx		  Y = vy		  Z = vz		  Angle = ang		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetRotate(quat As OxMQuaternion)		  		  #if NOT DebugBuild		    #pragma BackgroundTasks False		    #pragma BoundsChecking False		    #pragma NilObjectChecking False		    #pragma StackOverflowChecking False		  #endif		  		  Dim qX, qY, qZ, scale As Double		  		  qX = quat.X		  qY = quat.Y		  qZ = quat.Z		  		  scale = qX*qX + qY*qY + qZ*qZ		  		  if Abs(scale) < OxMath.kEpsilon then		    		    Angle = 0.0		    X = 0.0		    Y = 1.0		    Z = 0.0		    		  else		    		    scale = Sqrt(scale)		    Angle = 2.0*ACos(quat.W)		    X =  qX/scale		    Y =  qY/scale		    Z =  qZ/scale		    		  end if		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetRotate(v As OxMVector3, ang As Double)		  		  #if NOT DebugBuild		    #pragma BackgroundTasks False		    #pragma BoundsChecking False		    #pragma NilObjectChecking False		    #pragma StackOverflowChecking False		  #endif		  		  X = v.X		  Y = v.Y		  Z = v.Z		  Angle = ang		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function ToEuler() As OxMVector3		  		  ' http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToEuler/		  		  // NOT TESTED!		  		  Dim vec As New OxMVector3		  Dim s As Double = Sin(Angle)		  Dim c As Double = Cos(Angle)		  Dim t As Double = 1-c		  		  if (X*Y*t + Z*s) > 0.998 then		    vec.Y = 2*ATan2( X*Sin(Angle/2), Cos(Angle/2) )		    vec.X = OxMath.kPi/2		  elseif (X*Y*t + Z*s) < 0.998 then		    vec.Y = -2*ATan2( X*Sin(Angle/2), Cos(Angle/2) )		    vec.X = -OxMath.kPi/2		  else		    vec.Y = ATan2( Y*s-X*Z*t, 1-(Y*Y+Z*Z)*t )		    vec.X = ASin(X*Y*t+Z*s)		    vec.Z = ATan2( X*s-Y*Z*t, 1-(X*X+Z*Z)*t )		  end if		  		  return vec		End Function	#tag EndMethod	#tag Property, Flags = &h0		Angle As Double	#tag EndProperty	#tag Property, Flags = &h0		X As Double	#tag EndProperty	#tag Property, Flags = &h0		Y As Double	#tag EndProperty	#tag Property, Flags = &h0		Z As Double	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Angle"			Group="Behavior"			InitialValue="0"			Type="Double"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="2147483648"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="X"			Group="Behavior"			InitialValue="0"			Type="Double"		#tag EndViewProperty		#tag ViewProperty			Name="Y"			Group="Behavior"			InitialValue="0"			Type="Double"		#tag EndViewProperty		#tag ViewProperty			Name="Z"			Group="Behavior"			InitialValue="0"			Type="Double"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass