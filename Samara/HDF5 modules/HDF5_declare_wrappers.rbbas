#tag ModuleModule HDF5_declare_wrappers	#tag Method, Flags = &h0		Function H5Dclose(dataSet_id as integer) As integer		  // ends access to a dataset specified by dataset_id and releases resources used by it.		  // Further use of the dataset identifier is illegal in calls to the dataset API.		  		  soft declare function H5Dclose Lib HDFLibName(dataSet_id as integer) as integer		  		  dim i as integer		  		  if System.IsFunctionAvailable("H5Dclose", HDFLibName) then		    i =  H5Dclose(dataSet_id)		    'system.debugLog "HDF5_declare_wrappers module H5Dclose: " + str(i)		    return i		  else		    system.debugLog "HDF5_declare_wrappers module H5Dclose not available"		    beep		  end if		  		  // used		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function H5Dget_space(dataSet_id as integer) As integer		  // Returns an identifier for a copy of the dataspace for a dataset.		  		  soft declare function H5Dget_space Lib HDFLibName(dataSet_id as integer) as integer		  		  dim i as integer = 99		  		  if System.IsFunctionAvailable("H5Dget_space", HDFLibName) then		    i =  H5Dget_space(dataSet_id)		    'system.debugLog "HDF5_declare_wrappers module H5Dget_space: " + str(i)		    return i		  else		    system.debugLog "HDF5_declare_wrappers module H5Dget_space not available"		    beep		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function H5Dopen(file_id as integer, dataSetName as string) As integer		  soft declare function H5Dopen Lib HDFLibName(fileID as integer, dataSetName as CString) as integer		  		  		  dim group as integer		  		  if System.IsFunctionAvailable("H5Dopen", HDFLibName) then		    group =  H5Dopen(file_id, dataSetName)		    'system.debugLog "HDF5_declare_wrappers module H5Dopen: " + str(group)		    return group		  else		    system.debugLog "HDF5_declare_wrappers module H5Dopen not available"		    beep		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function H5Fis_hdf5(filename as string) As variant		  		  		  soft declare function H5Fis_hdf5 Lib HDFLibName (filename as Cstring) as integer		  dim i as integer		  		  if System.IsFunctionAvailable("H5Fis_hdf5", HDFLibName) then		    i =  H5Fis_hdf5(filename)		    'system.debugLog "HDF5_declare_wrappers module: H5Fis_hdf5 result: " + str(i)		    return i		  else		    system.debugLog "HDF5_declare_wrappers module: H5Fis_hdf5 not available"		    beep		    return "Failed to connect to HDF library for that function."		  end if		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function H5Fopen(filename as string, flags as integer, fapl as integer) As integer		  		  		  soft declare function H5Fopen Lib HDFLibName (filename as CString, flags as UInt8, fapl as UInt8) as integer		  dim i as integer		  		  if System.IsFunctionAvailable("H5Fopen", HDFLibName) then		    i =  H5Fopen(filename, 0, 0)		    'system.debugLog "HDF5_declare_wrappers module H5FOpen: " + str(i)		    return i		  else		    system.debugLog "HDF5_declare_wrappers module H5Fopen not available"		    beep		  end if		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function H5Gget_num_objs(loc_id as integer, byref hsize_t as integer) As integer		  // used to find the number of groups (ie trials) within a given file.		  		  soft declare function H5Gget_num_objs Lib HDFLibName(loc_id as integer, buf as ptr) as integer		  		  dim i as integer		  dim size as memoryBlock		  		  if System.IsFunctionAvailable("H5Gget_num_objs", HDFLibName) then		    		    size = new memoryBlock(8)  // seems to return a 64 bit integer.		    'size.littleEndian = false		    		    i =  H5Gget_num_objs(loc_id, size)		    hsize_t= size.uint64Value(0)		    		    'system.debugLog "HDF5_declare_wrappers module H5Gget_num_objs: " + str(i) + "  value: " + str(hsize_t)		    return i		    		  else		    system.debugLog "HDF5_declare_wrappers module H5Gget_num_objs not available"		    beep		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function H5Gopen(file_id as integer, groupName as string) As integer		  soft declare function H5Gopen Lib HDFLibName(fileID as integer, groupName as CString) as integer		  		  		  dim group as integer		  		  if System.IsFunctionAvailable("H5Gopen", HDFLibName) then		    group =  H5Gopen(file_id, groupName)		    'system.debugLog "HDF5_declare_wrappers module H5Gopen: " + str(group)		    return group		  else		    system.debugLog "HDF5_declare_wrappers module H5Gopen not available"		    beep		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function H5LTfind_attribute(loc_id as integer, objectName as string) As integer		  soft declare function H5LTfind_attribute Lib HDF_lt_LibName(loc_id as integer, objectName as CString) as integer		  		  dim i as integer		  		  if System.IsFunctionAvailable("H5LTfind_attribute", HDF_lt_LibName) then		    i =  H5LTfind_attribute(loc_id, objectName)		    		    if i <> 1 then  // if the operation failed, log the result code		      system.debugLog "HDF5_declare_wrappers module H5LTfind_attribute result: failed to find " + objectName		    end if		    		    return i		    		  else		    system.debugLog "HDF5_declare_wrappers module H5LTfind_attribute not available"		    return -1		  end if		  		  		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function H5LTfind_dataset(loc_id as integer, objectName as string) As integer		  soft declare function H5LTfind_dataset Lib HDF_lt_LibName(loc_id as integer, objectName as CString) as integer		  		  dim i as integer		  		  if System.IsFunctionAvailable("H5LTfind_dataset", HDF_lt_LibName) then		    i =  H5LTfind_dataset(loc_id, objectName)		    		    if i <> 1 then  // if the operation failed, log the result code		      system.debugLog "HDF5_declare_wrappers module H5LTfind_dataset result: failed to find " + objectName		    end if		    		    'if i = 1 then msgBox "Found: " + objectName		    		    return i		    		  else		    system.debugLog "HDF5_declare_wrappers module H5LTfind_dataset not available"		    beep		  end if		  		  		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function H5LTget_attribute_float(loc_id as integer, objectName as string, attributeName as string, buffer as memoryBlock) As integer		  soft declare function H5LTget_attribute_float Lib HDF_lt_LibName(loc_id as integer, objectName as CString, attributeName as CString, buf as ptr) as integer		  		  dim i as integer		  		  if System.IsFunctionAvailable("H5LTget_attribute_float", HDF_lt_LibName) then		    i =  H5LTget_attribute_float(loc_id, objectName, attributeName, buffer)		    		    if i < 0 then  // if the operation failed, log the result code		      system.debugLog "HDF5_declare_wrappers module H5LTget_attribute_float result: " + str(i) + "  " + attributeName		      		    else  // log the returned value		      'system.debugLog "HDF5_declare_wrappers module H5LTget_attribute_float:"  + str(buffer.singleValue(0))		    end if		    		    return i		    		  else		    system.debugLog "HDF5_declare_wrappers module H5LTget_attribute_float not available"		    beep		  end if		  		  		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function H5LTget_attribute_int(loc_id as integer, objectName as string, attributeName as string, buffer as memoryBlock) As integer		  soft declare function H5LTget_attribute_int Lib HDF_lt_LibName(loc_id as integer, objectName as CString, attributeName as CString, buf as ptr) as integer		  		  dim i as integer		  		  if System.IsFunctionAvailable("H5LTget_attribute_int", HDF_lt_LibName) then		    i =  H5LTget_attribute_int(loc_id, objectName, attributeName, buffer)		    		    if i < 0 then  // if the operation failed, log the result code		      system.debugLog "HDF5_declare_wrappers module H5LTget_attribute_int result: " + attributeName + str(i)		      		    else  // log the returned value		      'system.debugLog "HDF5_declare_wrappers module H5LTget_attribute_int:" + str(buffer.UInt32Value(0))		    end if		    		    return i		    		  else		    system.debugLog "HDF5_declare_wrappers module H5LTget_attribute_int not available"		    beep		  end if		  		  		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function H5LTget_attribute_string(loc_id as integer, objectName as string, attributeName as string, buffer as memoryBlock) As integer		  soft declare function H5LTget_attribute_string Lib HDF_lt_LibName(loc_id as integer, objectName as CString, attributeName as CString, buf as ptr) as integer		  		  dim i as integer		  		  if System.IsFunctionAvailable("H5LTget_attribute_string", HDF_lt_LibName) then		    i =  H5LTget_attribute_string(loc_id, objectName, attributeName, buffer)		    		    if i < 0 then  // if the operation failed, log the result code		      system.debugLog "HDF5_declare_wrappers module H5LTget_attribute_string result: " + str(i) + "  " + attributeName		    else  // log the returned value		      'system.debugLog "HDF5_declare_wrappers module H5LTget_attribute_string 1st 5 chars:" + buffer.stringValue(0, 5)		    end if		    return i		  else		    system.debugLog "HDF5_declare_wrappers module H5LTget_attribute_string not available"		    beep		  end if		  		  		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function H5LTread_dataset_double(loc_id as integer, dataSetName as string, buffer as memoryBlock) As integer		  soft declare function H5LTread_dataset_double Lib HDF_lt_LibName(loc_id as integer, dataSet as CString, buf as ptr) as integer		  		  dim i as integer		  		  if System.IsFunctionAvailable("H5LTread_dataset_double", HDF_lt_LibName) then		    i =  H5LTread_dataset_double(loc_id, dataSetName, buffer)		    if i < 0 then  // if the operation failed, log the result code		      system.debugLog "HDF5_declare_wrappers module H5LTread_dataset_double result: " + datasetName + " "  + str(i)		    else  // log the returned value		      'system.debugLog "HDF5_declare_wrappers module " + dataSetName + " first value: " + str(buffer.singleValue(0))		    end if		    return i		  else		    system.debugLog "HDF5_declare_wrappers module H5LTread_dataset_double not available"		    beep		  end if		  		  		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function H5LTread_dataset_float(loc_id as integer, dataSetName as string, buffer as memoryBlock) As integer		  soft declare function H5LTread_dataset_float Lib HDF_lt_LibName(loc_id as integer, dataSet as CString, buf as ptr) as integer		  		  dim i as integer		  		  if System.IsFunctionAvailable("H5LTread_dataset_float", HDF_lt_LibName) then		    i =  H5LTread_dataset_float(loc_id, dataSetName, buffer)		    if i < 0 then  // if the operation failed, log the result code		      system.debugLog "HDF5_declare_wrappers module H5LTread_dataset_float result: " + datasetName + " " + str(i)		    else  // log the returned value		      'system.debugLog "HDF5_declare_wrappers module " + dataSetName + " first value: " + str(buffer.singleValue(0))		    end if		    return i		  else		    system.debugLog "HDF5_declare_wrappers module H5LTread_dataset_float not available"		    beep		  end if		  		  		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function H5Sclose(dataSpace_ID as integer) As integer		  // H5Sclose releases a dataspace. Further access through the dataspace identifier is illegal.		  // Failure to release a dataspace with this call will result in resource leaks.		  		  soft declare function H5Sclose Lib HDFLibName(dataSpace_ID as integer) as integer		  		  dim i as integer		  		  if System.IsFunctionAvailable("H5Sclose", HDFLibName) then		    i =  H5Sclose(dataSpace_ID)		    'system.debugLog "HDF5_declare_wrappers module H5Sclose " + str(i)		    return i		  else		    system.debugLog "HDF5_declare_wrappers module H5Sclose not available"		    beep		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function H5Sget_simple_extent_dims(dataSpace_id as integer, dims as memoryBlock, maxDims as memoryBlock) As integer		  // Returns the size and maximum sizes of each dimension of a dataspace through the dims and maxdims parameters.		  		  soft declare function H5Sget_simple_extent_dims Lib HDFLibName(dataSet_id as integer, dims as ptr, maxDims as ptr) as integer		  		  dim i as integer = 99		  		  if System.IsFunctionAvailable("H5Sget_simple_extent_dims", HDFLibName) then		    'dims.littleEndian = false		    i =  H5Sget_simple_extent_dims(dataSpace_id, dims, maxDims)		    'system.debugLog "HDF5_declare_wrappers module H5Sget_simple_extent_dims: " + str(i)		    return i		  else		    system.debugLog "HDF5_declare_wrappers module H5Sget_simple_extent_dims not available"		    beep		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function H5Sget_simple_extent_ndims(dataSpace_id as integer) As integer		  // Returns the number of dimensions in the dataspace if successful; otherwise returns a negative value.		  		  soft declare function H5Sget_simple_extent_ndims Lib HDFLibName(dataSet_id as integer) as integer		  		  dim i as integer = 99		  		  if System.IsFunctionAvailable("H5Sget_simple_extent_ndims", HDFLibName) then		    i =  H5Sget_simple_extent_ndims(dataSpace_id)		    'system.debugLog "HDF5_declare_wrappers module H5Sget_simple_extent_ndims: " + str(i)		    return i		  else		    system.debugLog "HDF5_declare_wrappers module H5Sget_simple_extent_ndims not available"		    beep		  end if		End Function	#tag EndMethod	#tag Note, Name = About		This global module contains a selection of globally accessible methods which wrap the HDF5 declares of		the same names.  Pass in the required parameters and you will get the results from the HDF5 libraries returned.				Each method sends some results to the console log.  Also check the crash log for the application as that is where the 		detailed error logs from the HDF5 libraries appear if an error occurs within them.				Two libraries are referenced (see the constants within this module), the H5 and H5 lite libraries.  They in turn reference 		some compression libraries which for the time being are placed at a very inconvenient location at the root level of the boot volume.		Note the path in the library constants: in a final build, the libraries could be packaged within the OS X wrapper at the same		location as the app executable file.  In debug builds, these keep getting deleted, so the libraries must be kept outside the wrapper.				A more sophisticated way of doing this is described at http://realbasic.maccoding.com/dylib.html  :				#if DebugBuild then		CONST dylibLocation = "@executable_path/../../../SampleDylib.dylib"		#else		CONST dylibLocation = "@executable_path/SampleDylib.dylib"		#endif				But the question is where to put this code.  It is described as being in the app.open event.  But we need to put the constant declaration		in this module, and modules don't seem to have an open event.	#tag EndNote	#tag Constant, Name = HDFLibName, Type = String, Dynamic = False, Default = \"@executable_path/libhdf5.dylib", Scope = Public		#Tag Instance, Platform = Any, Language = Default, Definition  = \"/sw/lib/libhdf5.dylib"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"libhdf5"		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"hdf5dll.dll"	#tag EndConstant	#tag Constant, Name = HDF_lt_LibName, Type = String, Dynamic = False, Default = \"@executable_path/libhdf5_hl.dylib", Scope = Public		#Tag Instance, Platform = Any, Language = Default, Definition  = \"/sw/lib/libhdf5_hl.dylib"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"libhdf5_hl"		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"hdf5dll.dll"	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="2147483648"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule