#tag ClassClass StimulusInherits dictionary	#tag Method, Flags = &h0		Function clone() As stimulus		  // this method allows the dataParser to create a new instance of a stimulus with exactly the same properties		  // as this one.  Gets around problems of changing pointers rather than creating new instances in the dataParser		  		  // NB this has now also been implemented as an extends method to the dictionary class so that this facility is available to		  // all vanilla dictionary instances as required, not just stimulus instances		  		  		  dim s as stimulus		  dim i, upperLimit as integer		  dim keyString, valueString as string		  		  s = new stimulus		  upperLimit = self.count - 1  // this number is a true count, not a uBound		  		  for i = 0 to upperLimit		    s.value(self.key(i).stringValue) = self.value(self.key(i).stringValue)		  next		  		  return s		  		exception err		  gHandleException err, "clone method of the stimulus class."		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function directionVector() As OxMVector3		  // returns a OxMVector3 representing the direction of the stimulus.		  // the position vector gives where the target is located.		  // this method returns the vector from the previous stimulus to this one		  // so that amplitudes and directions of saccades can be compared to		  // a target rather than just looking at terminal measures of accuracy.		  		  		  // this is for 2D eye analysis only, so the z coordinate is returned as zero.		  // amplitudeX and Y are assigned in the iView importer thread.		  // they are signed values and so not truly amplitudes themselves. The scalar		  // amplitude of the stimulus is therefore the length of this vector		  		  dim vec as  new OxMVector3(self.value("amplitudeX"), self.value("amplitudeY"), 0)		  		  		  return vec		  		exception err		  gHandleException err, "directionVector method of the stimulus class."		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function disconnected() As boolean		  // if true, when the stimulus is drawn on screen it is isolated and does not have a line shown connecting it to the preceding stimulus.		  // this is for cosmetic purposes, where the vertical connecting line would be confusing, e.g. in a trial where there are several distractors		  // but only one actual target. The target might be connected to the fixation stimulus but the distractors would be drawn unconnected to other stimuli.		  		  // this tag is not defined in lots of experiments, so we need this method to ensure that we don't get an exception by testing the key directly		  		  if self.hasKey("disconnected") then		    return true		  else		    return false		  end if		  		  		exception err		  gHandleException err, "disconnected method of the stimulus class."		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function displayOnly() As boolean		  // allows the stimulus to be queried about whether it is displayOnly and can thus be ignored for purposes other than drawing.		  // e.g. a distractor which appears at the same time as the true target. Useful to display its location, but should be ignored in terms		  // of being selected to measure a saccade to it.		  		  // this tag is not defined in lots of experiments, so we need this method to ensure that we don't get an exception by testing the key directly		  		  if self.hasKey("displayOnly") then		    return true		  else		    return false		  end if		  		  		exception err		  gHandleException err, "displayOnly method of the stimulus class."		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function positionVector() As OxMVector3		  // returns a OxMVector3 representing the location of the stimulus.		  // for 2D stimuli, the z coordinate is returned as zero.		  // Allows easy calculation of distances and angles between		  // stimuli or between a stimulus and a given datapoint (i.e. an error).		  		  dim vec as  new OxMVector3(self.value("x"), self.value("y"), 0)		  		  if self.hasKey("z") then vec.Z = self.value("z")		  		  return vec		  		exception err		  gHandleException err, "positionVector method of the stimulus class."		End Function	#tag EndMethod	#tag Note, Name = About		This class is subclassed from a dictionary, so that components (eg x, y, t, etc) can be accessed		using variables rather than fixed dot notation references in code.  The subclass is necessary due to the addition of several methods.				Values that can be set:				Samara:		onsetTime		offsetTime		amplitude		x		y		gap		type		name e.g. fixation, left, right, etc		colour				Samurai adds:		z		alpha		colour		type (eg beep, target)	#tag EndNote	#tag Property, Flags = &h0		#tag Note			Controls whether the stimulus should be drawn on screen with a highlight or not			(designed to give explicit feedback of which stimulus will be selected for analysis).		#tag EndNote		highlighted As boolean = false	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="BinCount"			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="dictionary"		#tag EndViewProperty		#tag ViewProperty			Name="Count"			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="dictionary"		#tag EndViewProperty		#tag ViewProperty			Name="highlighted"			Group="Behavior"			InitialValue="false"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass